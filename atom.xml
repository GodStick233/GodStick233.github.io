<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://godstick233.github.io</id>
    <title>LeeYin&apos;BLOG</title>
    <updated>2021-03-08T16:05:37.408Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://godstick233.github.io"/>
    <link rel="self" href="https://godstick233.github.io/atom.xml"/>
    <subtitle>学更多的知识，做自由的灵魂</subtitle>
    <logo>https://godstick233.github.io/images/avatar.png</logo>
    <icon>https://godstick233.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, LeeYin&apos;BLOG</rights>
    <entry>
        <title type="html"><![CDATA[石油工程概论学习笔记]]></title>
        <id>https://godstick233.github.io/post/IntroductiontoPetroleumEngineering/</id>
        <link href="https://godstick233.github.io/post/IntroductiontoPetroleumEngineering/">
        </link>
        <updated>2021-03-07T13:52:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="第一章-绪论"><a href="https://godstick233.github.io/post/IntroductiontoPetroleumEngineering1/">第一章-绪论</a></h2>
<h2 id="第二章-油藏流体的物理性质"><a href="https://godstick233.github.io/post/IntroductiontoPetroleumEngineering2/">第二章-油藏流体的物理性质</a></h2>
<h2 id="第三章-油藏岩石的物理性质"><a href="https://godstick233.github.io/post/IntroductiontoPetroleumEngineering3/">第三章-油藏岩石的物理性质</a></h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[粒子群算法]]></title>
        <id>https://godstick233.github.io/post/li-zi-qun-suan-fa/</id>
        <link href="https://godstick233.github.io/post/li-zi-qun-suan-fa/">
        </link>
        <updated>2021-03-03T12:16:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="简介">简介</h3>
<p>粒子群算法（Particle Swarm Optimization），又称鸟群觅食算法，是由数学家J. Kennedy和R. C. Eberhart等开发出的一种新的进化算法。它是从随机解开始触发，通过迭代寻找出其中的最优解。本算法主要是通过适应度来评价解的分数，比传统的遗传算法更加的简单，它没有传统遗传算法中的“交叉”和“变异”等操作，它主要是追随当前搜索到的最优值来寻找到全局最优值。这种算法实现容易，精度高，收敛快等特点被广泛运用在各个问题中。</p>
<h3 id="基本思想">基本思想</h3>
<p>粒子群算法是模拟鸟群觅食的所建立起来的一种智能算法，一开始所有的鸟都不知道食物在哪里，它们通过找到离食物最近的鸟的周围，再去寻找食物，这样不断的追踪，大量的鸟都堆积在食物附近这样找到食物的几率就大大增加了。粒子群就是这样一种模拟鸟群觅食的过程，粒子群把鸟看成一个个粒子，它们拥有两个属性——位置和速度，然后根据自己的这两个属性共享到整个集群中，其他粒子改变飞行方向去找到最近的区域，然后整个集群都聚集在最优解附近，最后最终找到最优解。</p>
<h3 id="算法">算法</h3>
<p>算法中我们需要的数据结构，我们需要一个值来存储每个粒子搜索到的最优解，用一个值来存储整个群体在一次迭代中搜索到的最优解，这样我们的粒子速度和位置的更新公式如下：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><mi>w</mi><mo>∗</mo><mi>v</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>+</mo><mi>c</mi><mn>1</mn><mo>∗</mo><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mo>(</mo><mo>)</mo><mo>∗</mo><mo>(</mo><mi>p</mi><mi>b</mi><mi>e</mi><mi>s</mi><mi>t</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>−</mo><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>)</mo><mo>+</mo><mi>c</mi><mn>2</mn><mo>∗</mo><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mo>(</mo><mo>)</mo><mo>∗</mo><mo>(</mo><mi>g</mi><mi>b</mi><mi>e</mi><mi>s</mi><mi>t</mi><mo>−</mo><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">v[i] = w * v[i] + c1 * rand() * (pbest[i] - present[i]) + c2 * rand() * (gbest - present[i])   
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span><br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>+</mo><mi>v</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">
 present[i] = present[i] + v[i] 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span><br>
其中pbest是每个粒子搜索到的最优解，gbest是整个群体在一次迭代中搜索到的最优解，v[i]是代表第i个粒子的速度，w代表惯性系数是一个超参数，rang()表示的是在0到1的随机数。Present[i]代表第i个粒子当前的位置。我们通过上面的公式不停的迭代粒子群的状态，最终得到全局最优解</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python实现实时二维码识别]]></title>
        <id>https://godstick233.github.io/post/python-shi-xian-shi-shi-er-wei-ma-shi-bie/</id>
        <link href="https://godstick233.github.io/post/python-shi-xian-shi-shi-er-wei-ma-shi-bie/">
        </link>
        <updated>2021-02-28T13:34:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1准备工作">1.准备工作</h1>
<p>首先我们要安装我们本次开发所需要的库opencv和二维码解析库pyzbar<br>
安装opencv很简单直接:<br>
<code>pip install opencv-python</code><br>
然后我们接着安装pyzbar，我这里使用的是Linux系统进行的开发，我这里要多安装一个东西，具体如下：</p>
<pre><code> sudo apt-get install libzbar0
 pip install pyzbar 
</code></pre>
<p>这样我们本次所需要的环境就搭建好了。</p>
<h1 id="2码代码">2.码代码</h1>
<p>首先导入本次所需要的库，最后一个csv是Python自带的csv表格操作库，这里我们需要把我们扫到的二维码信息都存入csv表格里。</p>
<pre><code>import cv2
from pyzbar import pyzbar
import csv
</code></pre>
<p>然后我们设置一个变量，来存放我们扫到的二维码信息，我们每次扫描一遍都会要检测扫描到的二维码是不是之前扫描到的，如果没有就存放到这里。接着我们调用opencv的方法来实例化一个摄像头，最后我们设置一些我们存放二维码信息的表格的路径，一定要提前存放一个表格文件哦。</p>
<pre><code>found = set()
capture = cv2.VideoCapture(0)
PATH = &quot;test.csv&quot;
</code></pre>
<p>然后我们要写一个死循环，我们要不停的用摄像头来采集二维码，所以我们要在死循环里来写我们的二维码采集的代码。首先我们要用刚才实例化的摄像头来采集实时的照片，然后用pyzbar的函数来解析图片里面是否有二维码</p>
<pre><code>while(1):
    ret,frame = capture.read()
    test = pyzbar.decode(frame)
</code></pre>
<p>接着我们要查看我们采集到的二维码是不是之前采集到的，如果不是我们就存放到我们的表格文件里：</p>
<pre><code>    for tests in test:
        testdate = tests.data.decode('utf-8')#读取解析到的二维码信息
        print(testdate)#输出二维码信息
        if testdate not in found:#判断扫描到的信息是不是之前扫描到的
            with open(PATH,'a+') as f:
                csv_write = csv.writer(f)
                date = [testdate]
                csv_write.writerow(date)
            found.add(testdate)#把没有扫描到的二维码信息存放到found变量里
</code></pre>
<p>我们可以使用opencv的函数来实时查看摄像头的采集情况，最后再写一个键盘监听，如果我们按下q键就让循环终止，程序停止工作，不然的话会无休止的运作下去。</p>
<pre><code>    cv2.imshow('Test',frame)
    if cv2.waitKey(1) == ord('q'):
        break
</code></pre>
<h1 id="3完整代码">3.完整代码</h1>
<pre><code>import cv2
from pyzbar import pyzbar
import csv
found = set()
capture = cv2.VideoCapture(0)
PATH = &quot;test.csv&quot;
while(1):
    ret,frame = capture.read()
    test = pyzbar.decode(frame)
    for tests in test:
        testdate = tests.data.decode('utf-8')
        print(testdate)
        if testdate not in found:
            with open(PATH,'a+') as f:
                csv_write = csv.writer(f)
                date = [testdate]
                csv_write.writerow(date)
            found.add(testdate)
    cv2.imshow('Test',frame)
    if cv2.waitKey(1) == ord('q'):
        break
</code></pre>
]]></content>
    </entry>
</feed>